{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { Client } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CameraService = /*#__PURE__*/(() => {\n  class CameraService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:8080/api/camera';\n      this.wsUrl = 'http://localhost:8080/ws';\n      this.stompClient = null;\n      this.isConnectedSubject = new BehaviorSubject(false);\n      this.currentSessionSubject = new BehaviorSubject(null);\n      this.cameraFrameSubject = new BehaviorSubject(null);\n      this.isConnected$ = this.isConnectedSubject.asObservable();\n      this.currentSession$ = this.currentSessionSubject.asObservable();\n      this.cameraFrame$ = this.cameraFrameSubject.asObservable();\n    }\n    connectWebSocket() {\n      if (this.stompClient?.connected) {\n        return;\n      }\n      this.stompClient = new Client({\n        webSocketFactory: () => new SockJS(this.wsUrl),\n        debug: str => console.log('STOMP: ' + str),\n        onConnect: () => {\n          console.log('WebSocket Connected');\n          this.isConnectedSubject.next(true);\n        },\n        onDisconnect: () => {\n          console.log('WebSocket Disconnected');\n          this.isConnectedSubject.next(false);\n        },\n        onStompError: frame => {\n          console.error('STOMP Error: ', frame);\n        }\n      });\n      this.stompClient.activate();\n    }\n    disconnectWebSocket() {\n      if (this.stompClient) {\n        this.stompClient.deactivate();\n      }\n    }\n    subscribeToSession(sessionId) {\n      if (!this.stompClient?.connected) {\n        console.error('WebSocket not connected');\n        return;\n      }\n      // Subscribe to camera frames for this session\n      this.stompClient.subscribe(`/topic/camera/${sessionId}`, message => {\n        const frameData = JSON.parse(message.body);\n        this.cameraFrameSubject.next(frameData);\n      });\n    }\n    sendCameraFrame(sessionId, frameData) {\n      if (!this.stompClient?.connected) {\n        console.error('WebSocket not connected');\n        return;\n      }\n      this.stompClient.publish({\n        destination: `/app/camera/frame/${sessionId}`,\n        body: JSON.stringify(frameData)\n      });\n    }\n    startSession(deviceId) {\n      return this.http.post(`${this.apiUrl}/start-session`, null, {\n        params: {\n          deviceId\n        }\n      });\n    }\n    endSession(sessionId) {\n      return this.http.post(`${this.apiUrl}/end-session`, null, {\n        params: {\n          sessionId\n        }\n      });\n    }\n    uploadVideo(file, deviceId, sessionId) {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('deviceId', deviceId);\n      formData.append('sessionId', sessionId);\n      return this.http.post(`${this.apiUrl}/upload-video`, formData);\n    }\n    uploadScreenshot(file, deviceId, sessionId) {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('deviceId', deviceId);\n      formData.append('sessionId', sessionId);\n      return this.http.post(`${this.apiUrl}/upload-screenshot`, formData);\n    }\n    getActiveSessions() {\n      return this.http.get(`${this.apiUrl}/active-sessions`);\n    }\n    getAllVideos() {\n      return this.http.get(`${this.apiUrl}/videos`);\n    }\n    getAllScreenshots() {\n      return this.http.get(`${this.apiUrl}/screenshots`);\n    }\n    getVideosByDevice(deviceId) {\n      return this.http.get(`${this.apiUrl}/videos/device/${deviceId}`);\n    }\n    getScreenshotsByDevice(deviceId) {\n      return this.http.get(`${this.apiUrl}/screenshots/device/${deviceId}`);\n    }\n    getSession(sessionId) {\n      return this.http.get(`${this.apiUrl}/session/${sessionId}`);\n    }\n    downloadVideo(filename) {\n      return `${this.apiUrl}/download/video/${filename}`;\n    }\n    downloadScreenshot(filename) {\n      return `${this.apiUrl}/download/screenshot/${filename}`;\n    }\n    setCurrentSession(session) {\n      this.currentSessionSubject.next(session);\n    }\n    static {\n      this.ɵfac = function CameraService_Factory(t) {\n        return new (t || CameraService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CameraService,\n        factory: CameraService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CameraService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}