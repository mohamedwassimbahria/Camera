{"ast":null,"code":"import _asyncToGenerator from \"/workspace/angular-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/camera.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = [\"videoElement\"];\nfunction CameraComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 44);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" Device: \", ctx_r1.currentSession.deviceId, \" | Session: \", ctx_r1.currentSession.sessionId.substring(0, 8), \"... \");\n  }\n}\nfunction CameraComponent_img_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 45);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r1.latestFrameSrc, i0.ɵɵsanitizeUrl)(\"alt\", \"Remote session \" + ctx_r1.viewingSessionId);\n  }\n}\nfunction CameraComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46)(1, \"div\", 47);\n    i0.ɵɵelement(2, \"i\", 48);\n    i0.ɵɵelementStart(3, \"p\", 49);\n    i0.ɵɵtext(4, \"Camera not active\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction CameraComponent_span_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 50);\n  }\n}\nfunction CameraComponent_option_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 51);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const d_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", d_r3.deviceId);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(d_r3.label || \"Camera \" + d_r3.deviceId.substring(0, 6));\n  }\n}\nfunction CameraComponent_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34)(1, \"div\", 52);\n    i0.ɵɵelement(2, \"i\", 53);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Recording: \", ctx_r1.formatTime(ctx_r1.recordingTime), \" \");\n  }\n}\nfunction CameraComponent_div_66_div_6_img_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 62);\n  }\n  if (rf & 2) {\n    const media_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"src\", ctx_r1.getMediaUrl(media_r4), i0.ɵɵsanitizeUrl)(\"alt\", media_r4.fileName);\n  }\n}\nfunction CameraComponent_div_66_div_6_video_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"video\", 63);\n    i0.ɵɵelement(1, \"source\", 64);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const media_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"src\", ctx_r1.getMediaUrl(media_r4), i0.ɵɵsanitizeUrl);\n  }\n}\nfunction CameraComponent_div_66_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 57)(1, \"div\", 58);\n    i0.ɵɵtemplate(2, CameraComponent_div_66_div_6_img_2_Template, 1, 2, \"img\", 59)(3, CameraComponent_div_66_div_6_video_3_Template, 2, 1, \"video\", 60);\n    i0.ɵɵelementStart(4, \"small\", 61);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const media_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", media_r4.type === \"screenshot\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", media_r4.type === \"video\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(media_r4.fileName);\n  }\n}\nfunction CameraComponent_div_66_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 54)(1, \"div\", 14)(2, \"h6\", 5);\n    i0.ɵɵtext(3, \"Recent Captures\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 8)(5, \"div\", 55);\n    i0.ɵɵtemplate(6, CameraComponent_div_66_div_6_Template, 6, 3, \"div\", 56);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.recentMedia);\n  }\n}\nexport let CameraComponent = /*#__PURE__*/(() => {\n  class CameraComponent {\n    constructor(cameraService) {\n      this.cameraService = cameraService;\n      this.deviceId = 'mobile-device-' + Math.random().toString(36).substr(2, 9);\n      this.isCameraActive = false;\n      this.isRecording = false;\n      this.isLoading = false;\n      this.recordingTime = 0;\n      this.currentSession = null;\n      this.recentMedia = [];\n      this.mediaStream = null;\n      this.mediaRecorder = null;\n      this.recordedChunks = [];\n      this.subscriptions = [];\n      // New state for device selection and viewing\n      this.videoInputDevices = [];\n      this.selectedDeviceId = null;\n      this.viewingSessionId = '';\n      this.isViewing = false;\n      this.latestFrameSrc = null;\n    }\n    ngOnInit() {\n      this.cameraService.connectWebSocket();\n      // Subscribe to WebSocket connection status\n      this.subscriptions.push(this.cameraService.isConnected$.subscribe(connected => {\n        console.log('WebSocket connection status:', connected);\n      }));\n      // Subscribe to current session\n      this.subscriptions.push(this.cameraService.currentSession$.subscribe(session => {\n        this.currentSession = session;\n      }));\n      // Subscribe to incoming frames for viewing mode\n      this.subscriptions.push(this.cameraService.cameraFrame$.subscribe(framePayload => {\n        if (!this.isCameraActive && this.isViewing && framePayload?.frame) {\n          this.latestFrameSrc = framePayload.frame;\n        }\n      }));\n      // Try to populate available devices (will require permission for labels)\n      this.refreshDevices();\n    }\n    ngOnDestroy() {\n      this.stopCamera();\n      this.cameraService.disconnectWebSocket();\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n    startCamera() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          _this.isLoading = true;\n          // Request camera permission and get stream\n          const videoConstraints = _this.selectedDeviceId ? {\n            deviceId: {\n              exact: _this.selectedDeviceId\n            },\n            width: {\n              ideal: 1280\n            },\n            height: {\n              ideal: 720\n            }\n          } : {\n            width: {\n              ideal: 1280\n            },\n            height: {\n              ideal: 720\n            },\n            facingMode: 'environment'\n          };\n          _this.mediaStream = yield navigator.mediaDevices.getUserMedia({\n            video: videoConstraints,\n            audio: true\n          });\n          // Set video source\n          _this.videoElement.nativeElement.srcObject = _this.mediaStream;\n          // Refresh devices after permission to get labels\n          yield _this.refreshDevices();\n          // Start camera session\n          _this.cameraService.startSession(_this.deviceId).subscribe({\n            next: response => {\n              _this.currentSession = {\n                id: 0,\n                sessionId: response.sessionId,\n                deviceId: _this.deviceId,\n                startTime: new Date().toISOString(),\n                isActive: true,\n                ipAddress: '',\n                userAgent: navigator.userAgent\n              };\n              _this.cameraService.setCurrentSession(_this.currentSession);\n              _this.cameraService.subscribeToSession(response.sessionId);\n              _this.isCameraActive = true;\n              _this.isViewing = false;\n              _this.latestFrameSrc = null;\n              _this.startFrameStreaming();\n            },\n            error: error => {\n              console.error('Error starting camera session:', error);\n              _this.stopMediaStream();\n            },\n            complete: () => {\n              _this.isLoading = false;\n            }\n          });\n        } catch (error) {\n          console.error('Error accessing camera:', error);\n          _this.isLoading = false;\n          alert('Could not access camera. Please ensure camera permissions are granted.');\n        }\n      })();\n    }\n    stopCamera() {\n      this.stopRecording();\n      this.stopMediaStream();\n      if (this.currentSession) {\n        this.cameraService.endSession(this.currentSession.sessionId).subscribe({\n          next: () => {\n            console.log('Camera session ended');\n          },\n          error: error => {\n            console.error('Error ending session:', error);\n          }\n        });\n      }\n      this.isCameraActive = false;\n      this.currentSession = null;\n      this.cameraService.setCurrentSession(null);\n    }\n    refreshDevices() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          if (!navigator.mediaDevices?.enumerateDevices) {\n            _this2.videoInputDevices = [];\n            return;\n          }\n          const devices = yield navigator.mediaDevices.enumerateDevices();\n          _this2.videoInputDevices = devices.filter(d => d.kind === 'videoinput');\n        } catch (e) {\n          console.warn('Could not enumerate devices:', e);\n        }\n      })();\n    }\n    joinViewing() {\n      if (!this.viewingSessionId) return;\n      this.isViewing = true;\n      this.isCameraActive = false;\n      this.latestFrameSrc = null;\n      this.cameraService.subscribeToSession(this.viewingSessionId);\n    }\n    leaveViewing() {\n      this.isViewing = false;\n      this.latestFrameSrc = null;\n    }\n    stopMediaStream() {\n      if (this.mediaStream) {\n        this.mediaStream.getTracks().forEach(track => track.stop());\n        this.mediaStream = null;\n      }\n    }\n    startFrameStreaming() {\n      // Stream frames via WebSocket for real-time viewing\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const streamFrame = () => {\n        if (!this.isCameraActive || !this.videoElement?.nativeElement) return;\n        const video = this.videoElement.nativeElement;\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        ctx.drawImage(video, 0, 0);\n        const frameData = canvas.toDataURL('image/jpeg', 0.8);\n        if (this.currentSession) {\n          this.cameraService.sendCameraFrame(this.currentSession.sessionId, {\n            frame: frameData,\n            timestamp: Date.now()\n          });\n        }\n        if (this.isCameraActive) {\n          setTimeout(streamFrame, 100); // 10 FPS\n        }\n      };\n      // Start streaming after video is loaded\n      this.videoElement.nativeElement.addEventListener('loadedmetadata', () => {\n        streamFrame();\n      });\n    }\n    toggleRecording() {\n      if (this.isRecording) {\n        this.stopRecording();\n      } else {\n        this.startRecording();\n      }\n    }\n    startRecording() {\n      if (!this.mediaStream) return;\n      this.recordedChunks = [];\n      try {\n        this.mediaRecorder = new MediaRecorder(this.mediaStream, {\n          mimeType: 'video/webm;codecs=vp9'\n        });\n        this.mediaRecorder.ondataavailable = event => {\n          if (event.data.size > 0) {\n            this.recordedChunks.push(event.data);\n          }\n        };\n        this.mediaRecorder.onstop = () => {\n          this.saveRecording();\n        };\n        this.mediaRecorder.start();\n        this.isRecording = true;\n        this.recordingTime = 0;\n        // Update recording time\n        this.recordingInterval = setInterval(() => {\n          this.recordingTime++;\n        }, 1000);\n      } catch (error) {\n        console.error('Error starting recording:', error);\n      }\n    }\n    stopRecording() {\n      if (this.mediaRecorder && this.isRecording) {\n        this.mediaRecorder.stop();\n        this.isRecording = false;\n        if (this.recordingInterval) {\n          clearInterval(this.recordingInterval);\n          this.recordingInterval = null;\n        }\n      }\n    }\n    saveRecording() {\n      if (this.recordedChunks.length === 0 || !this.currentSession) return;\n      const blob = new Blob(this.recordedChunks, {\n        type: 'video/webm'\n      });\n      const file = new File([blob], `recording_${Date.now()}.webm`, {\n        type: 'video/webm'\n      });\n      this.cameraService.uploadVideo(file, this.deviceId, this.currentSession.sessionId).subscribe({\n        next: response => {\n          console.log('Video uploaded successfully:', response);\n          this.recentMedia.unshift({\n            type: 'video',\n            fileName: response.fileName,\n            url: this.cameraService.downloadVideo(response.fileName)\n          });\n        },\n        error: error => {\n          console.error('Error uploading video:', error);\n        }\n      });\n      this.recordingTime = 0;\n    }\n    takeScreenshot() {\n      if (!this.videoElement?.nativeElement || !this.currentSession) return;\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const video = this.videoElement.nativeElement;\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      ctx.drawImage(video, 0, 0);\n      canvas.toBlob(blob => {\n        if (blob) {\n          const file = new File([blob], `screenshot_${Date.now()}.png`, {\n            type: 'image/png'\n          });\n          this.cameraService.uploadScreenshot(file, this.deviceId, this.currentSession.sessionId).subscribe({\n            next: response => {\n              console.log('Screenshot uploaded successfully:', response);\n              this.recentMedia.unshift({\n                type: 'screenshot',\n                fileName: response.fileName,\n                url: this.cameraService.downloadScreenshot(response.fileName)\n              });\n            },\n            error: error => {\n              console.error('Error uploading screenshot:', error);\n            }\n          });\n        }\n      }, 'image/png');\n    }\n    getStatusClass() {\n      if (this.isRecording) return 'status-recording';\n      if (this.isCameraActive) return 'status-connected';\n      return 'status-disconnected';\n    }\n    formatTime(seconds) {\n      const minutes = Math.floor(seconds / 60);\n      const remainingSeconds = seconds % 60;\n      return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n    getMediaUrl(media) {\n      return media.url;\n    }\n    static {\n      this.ɵfac = function CameraComponent_Factory(t) {\n        return new (t || CameraComponent)(i0.ɵɵdirectiveInject(i1.CameraService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: CameraComponent,\n        selectors: [[\"app-camera\"]],\n        viewQuery: function CameraComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.videoElement = _t.first);\n          }\n        },\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 67,\n        vars: 30,\n        consts: [[\"videoElement\", \"\"], [1, \"row\"], [1, \"col-lg-8\"], [1, \"card\"], [1, \"card-header\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\"], [1, \"status-indicator\"], [\"class\", \"device-info\", 4, \"ngIf\"], [1, \"card-body\"], [1, \"video-container\"], [\"autoplay\", \"\", \"muted\", \"\", \"playsinline\", \"\", 1, \"video-stream\"], [\"class\", \"video-stream\", 3, \"src\", \"alt\", 4, \"ngIf\"], [\"class\", \"d-flex justify-content-center align-items-center\", \"style\", \"height: 300px; background: #f8f9fa;\", 4, \"ngIf\"], [1, \"col-lg-4\"], [1, \"card-header\"], [1, \"d-grid\", \"gap-2\"], [1, \"btn\", \"btn-primary\", 3, \"click\", \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-2\", 4, \"ngIf\"], [1, \"bi\", \"bi-camera\"], [1, \"btn\", \"btn-danger\", 3, \"click\", \"disabled\"], [1, \"bi\", \"bi-camera-video-off\"], [1, \"mb-2\"], [1, \"form-label\"], [1, \"input-group\"], [1, \"form-select\", 3, \"ngModelChange\", \"ngModel\", \"disabled\"], [3, \"ngValue\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\", \"disabled\"], [1, \"bi\", \"bi-arrow-clockwise\"], [1, \"text-muted\"], [1, \"btn\", \"btn-success\", 3, \"click\", \"disabled\"], [1, \"bi\"], [1, \"btn\", \"btn-info\", 3, \"click\", \"disabled\"], [\"class\", \"mt-4\", 4, \"ngIf\"], [1, \"mt-4\"], [\"for\", \"deviceId\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"deviceId\", \"placeholder\", \"Enter device identifier\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\", \"disabled\"], [1, \"mt-4\", \"p-3\", \"border\", \"rounded\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"mb-2\"], [1, \"form-label\", \"mb-0\"], [\"type\", \"button\", 1, \"btn\", \"btn-sm\", \"btn-outline-secondary\", 3, \"click\", \"disabled\"], [\"type\", \"text\", \"placeholder\", \"Enter session ID to view\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\", \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", 3, \"click\", \"disabled\"], [\"class\", \"card mt-3\", 4, \"ngIf\"], [1, \"device-info\"], [1, \"video-stream\", 3, \"src\", \"alt\"], [1, \"d-flex\", \"justify-content-center\", \"align-items-center\", 2, \"height\", \"300px\", \"background\", \"#f8f9fa\"], [1, \"text-center\"], [1, \"bi\", \"bi-camera-video-off\", 2, \"font-size\", \"3rem\", \"color\", \"#6c757d\"], [1, \"mt-3\", \"text-muted\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-2\"], [3, \"value\"], [1, \"alert\", \"alert-info\"], [1, \"bi\", \"bi-record-circle\", \"text-danger\"], [1, \"card\", \"mt-3\"], [1, \"row\", \"g-2\"], [\"class\", \"col-6\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-6\"], [1, \"position-relative\"], [\"class\", \"thumbnail w-100\", 3, \"src\", \"alt\", 4, \"ngIf\"], [\"class\", \"thumbnail w-100\", \"controls\", \"\", 4, \"ngIf\"], [1, \"text-muted\", \"d-block\", \"mt-1\"], [1, \"thumbnail\", \"w-100\", 3, \"src\", \"alt\"], [\"controls\", \"\", 1, \"thumbnail\", \"w-100\"], [\"type\", \"video/webm\", 3, \"src\"]],\n        template: function CameraComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"div\", 4)(4, \"h5\", 5);\n            i0.ɵɵelement(5, \"span\", 6);\n            i0.ɵɵtext(6, \" Camera Stream \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(7, CameraComponent_div_7_Template, 2, 2, \"div\", 7);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(8, \"div\", 8)(9, \"div\", 9);\n            i0.ɵɵelement(10, \"video\", 10, 0);\n            i0.ɵɵtemplate(12, CameraComponent_img_12_Template, 1, 2, \"img\", 11)(13, CameraComponent_div_13_Template, 5, 0, \"div\", 12);\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(14, \"div\", 13)(15, \"div\", 3)(16, \"div\", 14)(17, \"h5\", 5);\n            i0.ɵɵtext(18, \"Camera Controls\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(19, \"div\", 8)(20, \"div\", 15)(21, \"button\", 16);\n            i0.ɵɵlistener(\"click\", function CameraComponent_Template_button_click_21_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.startCamera());\n            });\n            i0.ɵɵtemplate(22, CameraComponent_span_22_Template, 1, 0, \"span\", 17);\n            i0.ɵɵelement(23, \"i\", 18);\n            i0.ɵɵtext(24, \" Start Camera \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(25, \"button\", 19);\n            i0.ɵɵlistener(\"click\", function CameraComponent_Template_button_click_25_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.stopCamera());\n            });\n            i0.ɵɵelement(26, \"i\", 20);\n            i0.ɵɵtext(27, \" Stop Camera \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(28, \"hr\");\n            i0.ɵɵelementStart(29, \"div\", 21)(30, \"label\", 22);\n            i0.ɵɵtext(31, \"Video input device\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(32, \"div\", 23)(33, \"select\", 24);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CameraComponent_Template_select_ngModelChange_33_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.selectedDeviceId, $event) || (ctx.selectedDeviceId = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementStart(34, \"option\", 25);\n            i0.ɵɵtext(35, \"Default camera\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(36, CameraComponent_option_36_Template, 2, 2, \"option\", 26);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(37, \"button\", 27);\n            i0.ɵɵlistener(\"click\", function CameraComponent_Template_button_click_37_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.refreshDevices());\n            });\n            i0.ɵɵelement(38, \"i\", 28);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(39, \"small\", 29);\n            i0.ɵɵtext(40, \"Use this to pick a virtual iPhone webcam (e.g., DroidCam/Iriun) on desktop.\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(41, \"hr\");\n            i0.ɵɵelementStart(42, \"button\", 30);\n            i0.ɵɵlistener(\"click\", function CameraComponent_Template_button_click_42_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.toggleRecording());\n            });\n            i0.ɵɵelement(43, \"span\", 6)(44, \"i\", 31);\n            i0.ɵɵtext(45);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(46, \"button\", 32);\n            i0.ɵɵlistener(\"click\", function CameraComponent_Template_button_click_46_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.takeScreenshot());\n            });\n            i0.ɵɵelement(47, \"i\", 18);\n            i0.ɵɵtext(48, \" Take Screenshot \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(49, CameraComponent_div_49_Template, 4, 1, \"div\", 33);\n            i0.ɵɵelementStart(50, \"div\", 34)(51, \"label\", 35);\n            i0.ɵɵtext(52, \"Device ID:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(53, \"input\", 36);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CameraComponent_Template_input_ngModelChange_53_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.deviceId, $event) || (ctx.deviceId = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(54, \"div\", 37)(55, \"div\", 38)(56, \"label\", 39);\n            i0.ɵɵtext(57, \"View-only session\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(58, \"button\", 40);\n            i0.ɵɵlistener(\"click\", function CameraComponent_Template_button_click_58_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.leaveViewing());\n            });\n            i0.ɵɵtext(59, \"Leave\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(60, \"div\", 23)(61, \"input\", 41);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CameraComponent_Template_input_ngModelChange_61_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.viewingSessionId, $event) || (ctx.viewingSessionId = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(62, \"button\", 42);\n            i0.ɵɵlistener(\"click\", function CameraComponent_Template_button_click_62_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.joinViewing());\n            });\n            i0.ɵɵtext(63, \" Join \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(64, \"small\", 29);\n            i0.ɵɵtext(65, \"Open this app on your iPhone, press Start Camera, then enter that session ID here to view.\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵtemplate(66, CameraComponent_div_66_Template, 7, 1, \"div\", 43);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(5);\n            i0.ɵɵclassMap(ctx.getStatusClass());\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.currentSession);\n            i0.ɵɵadvance(3);\n            i0.ɵɵstyleProp(\"display\", ctx.isCameraActive ? \"block\" : \"none\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", !ctx.isCameraActive && ctx.isViewing && ctx.latestFrameSrc);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", !ctx.isCameraActive && (!ctx.isViewing || !ctx.latestFrameSrc));\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"disabled\", ctx.isCameraActive || ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"disabled\", !ctx.isCameraActive);\n            i0.ɵɵadvance(8);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.selectedDeviceId);\n            i0.ɵɵproperty(\"disabled\", ctx.isCameraActive);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngValue\", null);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", ctx.videoInputDevices);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", ctx.isCameraActive);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"disabled\", !ctx.isCameraActive);\n            i0.ɵɵadvance();\n            i0.ɵɵclassMap(ctx.isRecording ? \"status-recording\" : \"\");\n            i0.ɵɵadvance();\n            i0.ɵɵclassMap(ctx.isRecording ? \"bi-stop-circle\" : \"bi-record-circle\");\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate1(\" \", ctx.isRecording ? \"Stop Recording\" : \"Start Recording\", \" \");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", !ctx.isCameraActive);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.recordingTime > 0);\n            i0.ɵɵadvance(4);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.deviceId);\n            i0.ɵɵproperty(\"disabled\", ctx.isCameraActive);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"disabled\", !ctx.isViewing);\n            i0.ɵɵadvance(3);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.viewingSessionId);\n            i0.ɵɵproperty(\"disabled\", ctx.isCameraActive);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", ctx.isCameraActive || !ctx.viewingSessionId);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.recentMedia.length > 0);\n          }\n        },\n        dependencies: [CommonModule, i2.NgForOf, i2.NgIf, FormsModule, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel],\n        styles: [\".video-container[_ngcontent-%COMP%]{position:relative;background:#000;border-radius:10px;overflow:hidden}.video-stream[_ngcontent-%COMP%]{width:100%;height:auto;max-height:500px}.thumbnail[_ngcontent-%COMP%]{height:80px;object-fit:cover;border-radius:5px}.status-indicator[_ngcontent-%COMP%]{display:inline-block;width:10px;height:10px;border-radius:50%;margin-right:8px}.status-connected[_ngcontent-%COMP%]{background:#28a745;box-shadow:0 0 8px #28a745}.status-disconnected[_ngcontent-%COMP%]{background:#dc3545}.status-recording[_ngcontent-%COMP%]{background:#ff6b35;animation:_ngcontent-%COMP%_pulse 1s infinite}@keyframes _ngcontent-%COMP%_pulse{0%{opacity:1}50%{opacity:.5}to{opacity:1}}\"]\n      });\n    }\n  }\n  return CameraComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}